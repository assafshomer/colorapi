[h]Issuing a new asset[/h]

<table class="asaf"><tr><td>In this section we will try to issue a new asset on the bitcoin <a href="https://en.bitcoin.it/wiki/Testnet" target="_blank">TESTNET</a> network.</td></tr></table> 

[i]create a new file in the same directory where you installed BitcoinJS and Node js[/i]
save the following into that file, say we call it <b>issue.js</b>.

First requiring the dependencies
[code]
// issue.js
var bitcoin = require('bitcoinjs-lib');
var request = require('request');
[/code]
Creating a new bitcoin key object and extracting the TESTNET address 
[code]
// issue.js
...
key = bitcoin.ECKey.makeRandom();
address = key.pub.getAddress(bitcoin.networks.testnet).toString();
...
[/code]

Now define an auxiliary function to help us POST to the colored coins API.
This function accepts the json_data to be posted and the API end point (as well as a callback).


[code]
// issue.js
...
function postToApi(api_endpoint, json_data, callback) {
	console.log(api_endpoint+': ', JSON.stringify(json_data));
	request.post({
		url: 'http://testnet.api.coloredcoins.org:80/v2/'+api_endpoint,
		headers: {'Content-Type': 'application/json'},
		form: json_data
	}, 
	function (error, response, body) {
		if (error) {
			return callback(error);
		}
		if (typeof body === String) {
			body = JSON.parse(body);
		}
		console.log('Status: ', response.statusCode);
		console.log('Body: ', JSON.stringify(body));
		return callback(null, body);
	});
};
...
[/code]

Now let's prepare the JSON data required for issuing a new asset.
[code]
// issue.js
...
var asset = {
    "issueAddress": address,
    "amount": 1,
    "fee": 1000,
    "metadata": {
        "assetId": "1",
        "assetName": "Asset Name",
        "issuer": "Asset Issuer",
        "description": "My Description",
        "userData": {
            "meta" : [
                {key: "Item ID", value: 2, type: "Number"},
                {key: "Item Name", value: "Item Name", type: "String"},
                {key: "Company", value: "My Company", type: "String"},
                {key: "Address", value: "San Francisco, CA", type: "String"}
            ]
        }
    }
};
...
[/code]

Finally, because we are interested in issuing a new asset the relevant end point is <b>issue</b>, so let's call the colored coins API and attempt to issue a new asset based on the above asset JSON:
[code]
// issue.js
...
postToApi('issue', asset, function(err, body){
    if (err) {
        console.log('error: ', err);
    }
});
[/code]

Now launch a terminal window and type

[code]
> node issue.js
----------------
issue:  {"issueAddress":"n2bhvGqphnFp7gUfm3QA2s26HDetkTvJjg","amount":1,"fee":1000,...}}
Status:  500
Body:  "{\"error\":\"Not enough funds to cover issuence\"}"
>
[/code] 

<table class="asaf"><tr><td>As you may have expected, we are getting an error. The error is pretty self explanatory, we first need to fund the issuing address with enough bitcoins to enable it to "carry" the colored coins <a href="https://github.com/Colored-Coins/Colored-Coins-Protocol-Specification/wiki/Coloring-Scheme#issuance-and-transfer-transactions" target="_blank">issuance transaction</a>.</td></tr></table>

Fortunately for us, we already prepared in advance a funded TESTNET address, so let's use it.