[h]Querying a Bitcoin Address[/h]
<table class="asaf"><tr><td>
Let's use the colored coins API to query for the content of the address <a href="http://coloredcoins.org/explorer/testnet/address/miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL" target="_blank"> miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL</a>. This is the new address to which we  <a href="http://coloredcoins.org/documentation/#IssueandTransfer" target="_blank">transferred</a> 33 units of the asset <a href="http://coloredcoins.org/explorer/testnet/asset/Lb9W5W5EFHhXK5Uv9rcMRvPV9WzJyPxpFP" target="_blank">Lb9W5W5EFHhXK5Uv9rcMRvPV9WzJyPxpFP</a> 
in the issuance transaction <a href="http://coloredcoins.org/explorer/testnet/tx/2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5" target="_blank">2ea25d59979e35aec5303....</a>. 
</td></tr></table> 

[i]create a new file in the same directory where you installed BitcoinJS & Node js[/i]
save the following into that file, say we call it <b>query_address.js</b>.

We use here the exact same code as was used in the previous sections where we queried the asset.
[code]
// query_address.js
var bitcoin = require('bitcoinjs-lib');
var request = require('request');

function getFromApi(api_endpoint, param, callback) {
	console.log('Get from:'+api_endpoint+'/'+param);
	request.get('http://testnet.api.coloredcoins.org:80/v2/'+api_endpoint+'/'+param, function (error, response, body) {
	    if (error) {
	        return callback(error);
	    }
	    if (typeof body === String) {
	        body = JSON.parse(body);
	    }
	    console.log('Status:', response.statusCode);
	    console.log('Body:', body);
	    return callback(null, body);
	});
};
...
[/code]

Now use the address instead of the AssetID:
[code]
// query_address.js
....
address='miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL';
getFromApi('addressinfo',address,function(err, body){
  if (err) consule.log('error: ', err);
});
[/code]

Let's launch a terminal and run the file
[code]> node query_address.js
------------------------------
Body: {"address":"miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL","utxos":[{"_id":"5590f3bf7c3454d08f7c1108","txid":"2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5","index":1,"value":600,"blockheight":486460,"used":false,"assets":[{"assetId":"Lb9W5W5EFHhXK5Uv9rcMRvPV9WzJyPxpFP","amount":33,"issueTxid":"2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5","divisibility":0,"lockStatus":null}],"scriptPubKey":{"asm":"OP_DUP OP_HASH160 1fbdbd176079a667572cc875f5a4e11ba42f89d9 OP_EQUALVERIFY OP_CHECKSIG","hex":"76a9141fbdbd176079a667572cc875f5a4e11ba42f89d988ac","reqSigs":1,"type":"pubkeyhash","addresses":["miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL"]}}]}
[/code]

If we unwrap the JSON we get this:

[code]
{
address: "miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL",
utxos: [
  {
    id: "5590f3bf7c3454d08f7c1108",
    txid: "2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5",
    index: 1,
    value: 600,
    blockheight: 486460,
    used: false,
    assets: [
      {
        assetId: "Lb9W5W5EFHhXK5Uv9rcMRvPV9WzJyPxpFP",
        amount: 33,
        issueTxid: "2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5",
        divisibility: 0,
        lockStatus: null
      }
    ],
    scriptPubKey: {
      asm: "OP_DUP OP_HASH160 1fbdbd176079a667572cc875f5a4e11ba42f89d9 OP_EQUALVERIFY OP_CHECKSIG",
      hex: "76a9141fbdbd176079a667572cc875f5a4e11ba42f89d988ac",
      reqSigs: 1,
      type: "pubkeyhash",
      addresses: [
        "miQnYGkmPZ5yne2S2n3UibxZLcAhMhNCAL"
      ]
    }
  }
]
}
[/code]

<table class="asaf"><tr><td>
We can glean from here that this address holds 33 units of the asset Lb9W5W5EFHhXK5Uv9rcMRvPV9WzJyPxpFP. Furthermore, we can see that there is an <a href="https://bitcoin.org/en/developer-guide#block-chain-overview" target="_blank">unspent transaction output</a> (a.k.a a <b>UTXO</b>). This means that we can transfer this asset by spending that UTXO. A UTXO, being a special case of a Bitcoin output, is uniquely identifiable by the <b>transaction_id</b> and the <b>index</b> in the list of outputs of the transaction that contains it.
In our case, we see that the UTXO is the second output (index number 1) of the issuance transaction <a href="http://coloredcoins.org/explorer/testnet/tx/2ea25d59979e35aec53037b2bf47014f21358f550c8ef290e04249b152ba3de5" target="_blank">2ea25d59979e35aec5303....</a>. 
</td></tr></table> 



