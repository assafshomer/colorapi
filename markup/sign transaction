[h]Signing the transaction[/h]

Signing the issuance transaction requires the private key of the underlying address and the Hexadecimal representation of the unsigned transaction that we got back from the <b>'issue'</b> API endpoint.

[i]create a new file in the same directory where you installed BitcoinJS and Node js[/i]
save the following into that file, say we call it <b>sign_transaction.js</b>.

First require the bitcoinjs dependency
[code]// sign_transaction.js
var bitcoin = require('bitcoinjs-lib');
[/code]

Now add the following <b>signTx</b> function that will perform the actual signing. This function accepts the hexadecimal representation of an unsigned Bitcoin transaction and the <a href="https://en.bitcoin.it/wiki/Wallet_import_format" target="_blank">Wallet Import Format</a> representation (or WIF for short) of the private key controlling the underlying address. If everything is valid, we get back a signed Bitcoin transaction.

[code]// sign_transaction.js
....
function signTx (unsignedTx, wif) {
    privateKey = bitcoin.ECKey.fromWIF(wif);
    var tx = bitcoin.Transaction.fromHex(unsignedTx)
    var insLength = tx.ins.length
    for (var i = 0; i < insLength; i++) {
        tx.sign(i, privateKey)
    }
    return tx.toHex()
}
...[/code]


<table class="asaf"><tr><td>The private key for the issuance address was obtained when we <a href="http://coloredcoins.org/documentation/#CreatingaTestnetAddress" target="_blank">created (and funded)</a> our TESTNET address
</td></tr></table> Let's copy the private key from there. 

The hexadecimal representation of the unsigned transaction is the value of 'body.txHex' we got from the <a href="http://coloredcoins.org/documentation/#Issuance-2ndattempt" target="_blank">'issue' API call</a>. 

Let's add those to our file:

[code]// sign_transaction.js
....
var key = 'wif format of private key of your issuance address'
// e.g. var key = 'KzH9zdXm95Xv3z7oNxzM6HqSPUiQbuyKoFdQBTf3HKx1B6eYdbAn';
var txHex = 'body.txHex response to issue';
// e.g. txHex = '0100000001fa9e0775c969fe34b612b8008ac512d93a71196e59fb6366cf3ce42f227187df0000000000ffffffff03580200000000000047512103ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2103b4af67f2c9caa9672926492ad18bf58cb2c8657785e9e4d08afa74cec93de36a52ae00000000000000001c6a1a43430102a00a3e5f885af0b10ef0bde4c8cde5a9417067020110003c0f00000000001976a914ea55c2430dca31e56ef5ae55c2863dae65df908688ac00000000'
...
[/code]

Finally, let's add print the signed transaction to the console
[code]// sign_transaction.js
....
var signedTxHex = signTx(txHex, key);
console.log("signedTxHex: ["+signedTxHex+"]");[/code]

Launch a console an run the file
[code]> node sign_transaction.js
-----------------------------
signedTxHex: [0100000001fa9e0775c969fe34b612b8008ac512d93a71196e59fb6366cf3ce42f227187df000000006b483045022100e10eb5986f34d41efbc20e9454fbbaf505fd82744c9aa5e49a5789cd09d16cc802203b36abe0b8c0ab091207dfa94c240e2c74d840ee98990b333b15168d34ec5f95012102c5ac36c34715ebf5b82abab08132ca08e90cc40ed8c2ca29620d0f00f28655d6ffffffff03580200000000000047512103ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2103b4af67f2c9caa9672926492ad18bf58cb2c8657785e9e4d08afa74cec93de36a52ae00000000000000001c6a1a43430102a00a3e5f885af0b10ef0bde4c8cde5a9417067020110003c0f00000000001976a914ea55c2430dca31e56ef5ae55c2863dae65df908688ac00000000][/code]

There we are, this is a hexadecimal representation of the signed issuance transaction. 

The next step would be to use the colored coins API to broadcast this signed transaction to the TESTNET network, so that it can be <b>written to the blockchain.</b>